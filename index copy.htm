<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Bee Jumble ArcHive</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="icon" href="bee.ico" type="image/x-icon" />
  <style>

html {
  overflow-y: scroll;
  scroll-behavior: smooth;
}

body {
  margin: 0;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  background: #fff;
  color: #111;
  padding: 0;
  line-height: 1.6;
}

.navbar {
  background-color: #000;
  color: #FFD700;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1rem;
  flex-wrap: wrap;
}

.navbar-title {
  font-size: 1.5rem;
  font-weight: bold;
}

.navbar-buttons {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 0.75rem;
}

/* Unified style for all nav elements (buttons + select) */
.nav-controls button,
.nav-controls select,
.navbar-button {
  height: 40px;
  font-size: 1em;
  border: 2px solid #FFD700;
  background-color: transparent;
  color: #FFD700;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s, color 0.2s;
  font-family: inherit;
}

/* Compact arrow buttons */
.nav-controls button {
  width: 40px;
  padding: 0;
  text-align: center;
}

/* Date picker sizing */
.nav-controls select {
  width: 200px;
  min-width: 150px;
  max-width: 200px;
  padding: 0 0.75em;
}

/* Top nav buttons (Print, Bee Box) */
.navbar-button {
  padding: 0 0.75rem;
  display: flex;
  align-items: center;
  text-decoration: none;
}

/* Hover styles */
.nav-controls button:hover,
.nav-controls select:hover,
.navbar-button:hover {
  background-color: #FFD700;
  color: #000;
}

.nav-controls {
  display: flex;
  align-items: center;
  gap: 0.25em;
  flex-wrap: nowrap;
}

.instructions {
  max-width: 700px;
  margin: 1.25em auto 0.75em;
  font-size: 1rem;
  color: #333;
  text-align: center;
  line-height: 1.5;
  padding: 0 1em;
}

.separator {
  width: 800px;
  margin: 1em auto;
  border: 0;
  border-top: 1px solid #ccc;
}

.subtitle {
  text-align: center;
  font-size: 1em;
  margin: 0.5em auto 0.75em;
}

header.main-header {
  display: grid;
  grid-template-columns: auto;
  align-items: center;
  max-width: 800px;
  margin: 0 auto;
  padding: 0.5em 0;
}

.honeycomb-container {
  display: flex;
  justify-content: center;
  min-height: 70px;
}

#honeycomb:empty::before {
  content: "";
  display: block;
  width: 420px;
  height: 60px;
}

.honeycomb {
  display: flex;
  gap: 10px;
  justify-content: center;
}

svg {
  display: block;
}

.puzzle {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2em;
  padding: 1em;
}

.word-group {
  max-width: 700px;
  width: 100%;
}

.group-label {
  font-weight: bold;
  font-size: 1.25em;
  margin: 1.5em 0 0.5em;
  text-align: left;
  color: #333;
}

.word-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  gap: 0.5em;
}

.word-box {
  padding: 0.5em;
  border: 1px solid #ccc;
  text-align: center;
  border-radius: 4px;
  font-family: Georgia, serif;
  background: #fdfdfd;
  transition: background 0.2s;
  cursor: pointer;
}

.word-box[data-revealed="true"] {
  background: #fffae0;
}

/* üì± Mobile tweaks */
@media (max-width: 480px) {
  .nav-controls {
    flex-direction: column;
    gap: 0.5em;
    align-items: stretch;
  }

  .nav-controls button,
  .nav-controls select,
  .navbar-button {
    width: 100%;
  }

  .navbar-buttons {
    flex-direction: column;
    align-items: stretch;
  }

  .navbar-button {
    justify-content: center;
  }
}

  </style>
</head>
<body>
  <nav class="navbar">
    <div class="navbar-title">Bee Jumble ArcHive</div>
    <div class="navbar-buttons">
      <div class="nav-controls">
        <button id="prevDayBtn">‚Üê</button>
        <select id="dateSelector"></select>
        <button id="nextDayBtn">‚Üí</button>
      </div>
      <button class="navbar-button" onclick="window.print()">üñ®Ô∏è Print</button>
      <a class="navbar-button" href="https://thegamebureau.com/beebox" target="_blank">üêù Bee Box</a>
    </div>
  </nav>

  <div class="instructions">
    <p>
      <strong>Feeling stuck on today‚Äôs NYT Spelling Bee, but not ready to throw in the towel?</strong><br />
      We‚Äôve got your back ‚Äî below are the valid words from the puzzle‚Ä¶ but jumbled!<br />
      <strong>‚ú® Tap a jumbled word below to reveal or hide the answer</strong>
    </p>
  </div>
  <hr class="separator" />
  <div class="subtitle" id="worksheetTitle">TheGameBureau.com presents the Bee Jumble for</div>
  <header class="main-header">
    <div class="honeycomb-container">
      <div class="honeycomb" id="honeycomb"></div>
    </div>
  </header>
  <div class="puzzle" id="puzzle"></div>

  <script>
    function formatDate(date) {
      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
    }

    function createHexSVG(letter, count, isYellow = false) {
      const svgNS = "http://www.w3.org/2000/svg";
      const svg = document.createElementNS(svgNS, "svg");
      svg.setAttribute("width", "60");
      svg.setAttribute("height", "52");
      svg.setAttribute("viewBox", "0 0 100 86");

      const polygon = document.createElementNS(svgNS, "polygon");
      polygon.setAttribute("points", "50,0 93,25 93,61 50,86 7,61 7,25");
      polygon.setAttribute("fill", isYellow ? "#f7da21" : "#e0e0e0");
      polygon.setAttribute("stroke", isYellow ? "#000" : "#999");
      polygon.setAttribute("stroke-width", isYellow ? "3" : "1");
      svg.appendChild(polygon);

      const text = document.createElementNS(svgNS, "text");
      text.setAttribute("x", "50%");
      text.setAttribute("y", "50%");
      text.setAttribute("text-anchor", "middle");
      text.setAttribute("font-family", "Georgia");
      text.setAttribute("font-size", "32");
      text.setAttribute("font-weight", "bold");
      text.setAttribute("fill", "#000");
      text.setAttribute("dominant-baseline", "middle");
      text.innerHTML = `${letter}<tspan dx="4" dy="0" font-size="22" alignment-baseline="middle">${count}</tspan>`;
      svg.appendChild(text);

      return svg;
    }

    function populateDateSelector() {
      fetch("jumbledbees.xml")
        .then(response => response.text())
        .then(xmlText => {
          const parser = new DOMParser();
          const xmlDoc = parser.parseFromString(xmlText, "application/xml");
          const puzzles = Array.from(xmlDoc.getElementsByTagName("puzzle"));
          const selector = document.getElementById("dateSelector");

          puzzles.sort((a, b) => new Date(b.getAttribute("date")) - new Date(a.getAttribute("date")));

          puzzles.forEach(puzzle => {
            const dateStr = puzzle.getAttribute("date");
            const [yyyy, mm, dd] = dateStr.split('-');
            const dateObj = new Date(+yyyy, +mm - 1, +dd);
            const option = document.createElement("option");
            option.value = dateStr;
            option.textContent = dateObj.toDateString();
            selector.appendChild(option);
          });

          const urlDate = new URLSearchParams(window.location.search).get("date");
          const defaultDate = urlDate || puzzles[0].getAttribute("date");
          selector.value = defaultDate;
          loadPuzzle(defaultDate);
        });
    }

    function loadPuzzle(dateStr) {
      fetch("jumbledbees.xml")
        .then(response => response.text())
        .then(xmlText => {
          const parser = new DOMParser();
          const xmlDoc = parser.parseFromString(xmlText, "application/xml");
          const puzzles = xmlDoc.getElementsByTagName("puzzle");
          const puzzleDiv = document.getElementById("puzzle");
          const honeycomb = document.getElementById("honeycomb");
          puzzleDiv.innerHTML = '';
          honeycomb.innerHTML = '';

          for (let puzzle of puzzles) {
            if (puzzle.getAttribute("date") === dateStr) {
              const rawDate = puzzle.getAttribute("date");
              const [yyyy, mm, dd] = rawDate.split('-');
              const fullDate = new Date(+yyyy, +mm - 1, +dd);
              const options = { weekday: 'long', year: 'numeric', month: 'long', day: '2-digit' };
              const formatted = fullDate.toLocaleDateString('en-US', options);
              document.getElementById("worksheetTitle").textContent =
                `TheGameBureau.com presents the Bee Jumble for ${formatted}`;

              const letters = puzzle.getAttribute("letters");
              const wordElements = puzzle.getElementsByTagName("word");

              const letterCounts = [];
              for (let i = 1; i <= letters.length; i++) {
                const tag = puzzle.getElementsByTagName(`letter${i}`)[0];
                letterCounts.push(tag ? tag.textContent : "0");
              }

              for (let i = 0; i < letters.length; i++) {
                const hexSVG = createHexSVG(letters[i], letterCounts[i], i === 0);
                honeycomb.appendChild(hexSVG);
              }

              const words = Array.from(wordElements).map(w => ({
                text: w.textContent,
                length: parseInt(w.getAttribute("length") || w.textContent.length),
                original: w.getAttribute("original_word") || ''
              }));

              words.sort((a, b) => a.length - b.length || a.text.localeCompare(b.text));

              const groups = {};
              for (let word of words) {
                if (!groups[word.length]) groups[word.length] = [];
                groups[word.length].push(word);
              }

              for (const len of Object.keys(groups).sort((a, b) => a - b)) {
                const group = document.createElement("div");
                group.className = "word-group";

                const label = document.createElement("div");
                label.className = "group-label";
                label.textContent = `${len}-letter words`;
                group.appendChild(label);

                const grid = document.createElement("div");
                grid.className = "word-grid";

                for (let word of groups[len]) {
                  const box = document.createElement("div");
                  box.className = "word-box";
                  box.textContent = word.text;
                  box.dataset.revealed = "false";

                  if (word.original && word.original !== word.text) {
                    box.addEventListener("click", () => {
                      box.dataset.revealed === "true"
                        ? (box.textContent = word.text, box.dataset.revealed = "false")
                        : (box.textContent = `${word.text} (${word.original})`, box.dataset.revealed = "true");
                    });
                  }

                  grid.appendChild(box);
                }

                group.appendChild(grid);
                puzzleDiv.appendChild(group);
              }

              break;
            }
          }
        });
    }

    document.getElementById("dateSelector").addEventListener("change", function () {
      const date = this.value;
      const newUrl = `${window.location.pathname}?date=${date}`;
      window.location.href = newUrl;
    });

    document.getElementById("prevDayBtn").addEventListener("click", () => {
      const selector = document.getElementById("dateSelector");
      const currentIndex = selector.selectedIndex;
      if (currentIndex < selector.options.length - 1) {
        const prevDate = selector.options[currentIndex + 1].value;
        window.location.href = `${window.location.pathname}?date=${prevDate}`;
      }
    });

    document.getElementById("nextDayBtn").addEventListener("click", () => {
      const selector = document.getElementById("dateSelector");
      const currentIndex = selector.selectedIndex;
      if (currentIndex > 0) {
        const nextDate = selector.options[currentIndex - 1].value;
        window.location.href = `${window.location.pathname}?date=${nextDate}`;
      }
    });

    populateDateSelector();
  </script>
</body>
</html>
